{
  "hash": "420990ffefcea8815bd201c9c19d8cae",
  "result": {
    "markdown": "---\ntitle: Your Title\nformat:\n  html:\n    self-contained: true\n---\n\n## K-Mean Clustering\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nfrom pyspark.sql import SparkSession\nimport pandas as pd\nfrom pyspark.sql import functions as F\nfrom pyspark.sql.types import StringType\nfrom pyspark.ml.feature import StringIndexer, VectorAssembler, StandardScaler\nfrom pyspark.ml.clustering import KMeans\nfrom pyspark.ml import Pipeline\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n```\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# Initialize Spark Session\nspark = SparkSession.builder.appName(\"./data/LightcastData\").getOrCreate()\n\ndf = spark.read.option(\"header\", \"true\") \\\n            .option(\"inferSchema\", \"true\") \\\n            .option(\"multiLine\", \"true\") \\\n            .option(\"escape\", \"\\\"\") \\\n            .csv(\"./data/lightcast_job_postings.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWARNING: Using incubator modules: jdk.incubator.vector\nUsing Spark's default log4j profile: org/apache/spark/log4j2-defaults.properties\nSetting default log level to \"WARN\".\nTo adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).\n25/10/01 01:30:58 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable\n25/10/01 01:30:59 WARN Utils: Service 'SparkUI' could not bind on port 4040. Attempting port 4041.\n\r[Stage 1:>                                                          (0 + 1) / 1]\r\r                                                                                \r\n```\n:::\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ndef label_ai_roles(title):\n    ai_keywords = [\"AI\", \"artificial intelligence\", \"machine learning\", \n                \"data scientist\", \"deep learning\"]\n    title_lower = str(title).lower() if title else ''\n    return \"AI\" if any(keyword in title_lower for keyword in ai_keywords) else \"Non-AI\"\n\n\nlabel_ai_udf = F.udf(label_ai_roles, StringType())\n\ndf = df.withColumn('ai_label', label_ai_udf(\"TITLE_RAW\"))\n```\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\ndf.printSchema()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nroot\n |-- ID: string (nullable = true)\n |-- LAST_UPDATED_DATE: string (nullable = true)\n |-- LAST_UPDATED_TIMESTAMP: timestamp (nullable = true)\n |-- DUPLICATES: integer (nullable = true)\n |-- POSTED: string (nullable = true)\n |-- EXPIRED: string (nullable = true)\n |-- DURATION: integer (nullable = true)\n |-- SOURCE_TYPES: string (nullable = true)\n |-- SOURCES: string (nullable = true)\n |-- URL: string (nullable = true)\n |-- ACTIVE_URLS: string (nullable = true)\n |-- ACTIVE_SOURCES_INFO: string (nullable = true)\n |-- TITLE_RAW: string (nullable = true)\n |-- BODY: string (nullable = true)\n |-- MODELED_EXPIRED: string (nullable = true)\n |-- MODELED_DURATION: integer (nullable = true)\n |-- COMPANY: integer (nullable = true)\n |-- COMPANY_NAME: string (nullable = true)\n |-- COMPANY_RAW: string (nullable = true)\n |-- COMPANY_IS_STAFFING: boolean (nullable = true)\n |-- EDUCATION_LEVELS: string (nullable = true)\n |-- EDUCATION_LEVELS_NAME: string (nullable = true)\n |-- MIN_EDULEVELS: integer (nullable = true)\n |-- MIN_EDULEVELS_NAME: string (nullable = true)\n |-- MAX_EDULEVELS: integer (nullable = true)\n |-- MAX_EDULEVELS_NAME: string (nullable = true)\n |-- EMPLOYMENT_TYPE: integer (nullable = true)\n |-- EMPLOYMENT_TYPE_NAME: string (nullable = true)\n |-- MIN_YEARS_EXPERIENCE: integer (nullable = true)\n |-- MAX_YEARS_EXPERIENCE: integer (nullable = true)\n |-- IS_INTERNSHIP: boolean (nullable = true)\n |-- SALARY: integer (nullable = true)\n |-- REMOTE_TYPE: integer (nullable = true)\n |-- REMOTE_TYPE_NAME: string (nullable = true)\n |-- ORIGINAL_PAY_PERIOD: string (nullable = true)\n |-- SALARY_TO: integer (nullable = true)\n |-- SALARY_FROM: integer (nullable = true)\n |-- LOCATION: string (nullable = true)\n |-- CITY: string (nullable = true)\n |-- CITY_NAME: string (nullable = true)\n |-- COUNTY: integer (nullable = true)\n |-- COUNTY_NAME: string (nullable = true)\n |-- MSA: integer (nullable = true)\n |-- MSA_NAME: string (nullable = true)\n |-- STATE: integer (nullable = true)\n |-- STATE_NAME: string (nullable = true)\n |-- COUNTY_OUTGOING: integer (nullable = true)\n |-- COUNTY_NAME_OUTGOING: string (nullable = true)\n |-- COUNTY_INCOMING: integer (nullable = true)\n |-- COUNTY_NAME_INCOMING: string (nullable = true)\n |-- MSA_OUTGOING: integer (nullable = true)\n |-- MSA_NAME_OUTGOING: string (nullable = true)\n |-- MSA_INCOMING: integer (nullable = true)\n |-- MSA_NAME_INCOMING: string (nullable = true)\n |-- NAICS2: integer (nullable = true)\n |-- NAICS2_NAME: string (nullable = true)\n |-- NAICS3: integer (nullable = true)\n |-- NAICS3_NAME: string (nullable = true)\n |-- NAICS4: integer (nullable = true)\n |-- NAICS4_NAME: string (nullable = true)\n |-- NAICS5: integer (nullable = true)\n |-- NAICS5_NAME: string (nullable = true)\n |-- NAICS6: integer (nullable = true)\n |-- NAICS6_NAME: string (nullable = true)\n |-- TITLE: string (nullable = true)\n |-- TITLE_NAME: string (nullable = true)\n |-- TITLE_CLEAN: string (nullable = true)\n |-- SKILLS: string (nullable = true)\n |-- SKILLS_NAME: string (nullable = true)\n |-- SPECIALIZED_SKILLS: string (nullable = true)\n |-- SPECIALIZED_SKILLS_NAME: string (nullable = true)\n |-- CERTIFICATIONS: string (nullable = true)\n |-- CERTIFICATIONS_NAME: string (nullable = true)\n |-- COMMON_SKILLS: string (nullable = true)\n |-- COMMON_SKILLS_NAME: string (nullable = true)\n |-- SOFTWARE_SKILLS: string (nullable = true)\n |-- SOFTWARE_SKILLS_NAME: string (nullable = true)\n |-- ONET: string (nullable = true)\n |-- ONET_NAME: string (nullable = true)\n |-- ONET_2019: string (nullable = true)\n |-- ONET_2019_NAME: string (nullable = true)\n |-- CIP6: string (nullable = true)\n |-- CIP6_NAME: string (nullable = true)\n |-- CIP4: string (nullable = true)\n |-- CIP4_NAME: string (nullable = true)\n |-- CIP2: string (nullable = true)\n |-- CIP2_NAME: string (nullable = true)\n |-- SOC_2021_2: string (nullable = true)\n |-- SOC_2021_2_NAME: string (nullable = true)\n |-- SOC_2021_3: string (nullable = true)\n |-- SOC_2021_3_NAME: string (nullable = true)\n |-- SOC_2021_4: string (nullable = true)\n |-- SOC_2021_4_NAME: string (nullable = true)\n |-- SOC_2021_5: string (nullable = true)\n |-- SOC_2021_5_NAME: string (nullable = true)\n |-- LOT_CAREER_AREA: integer (nullable = true)\n |-- LOT_CAREER_AREA_NAME: string (nullable = true)\n |-- LOT_OCCUPATION: integer (nullable = true)\n |-- LOT_OCCUPATION_NAME: string (nullable = true)\n |-- LOT_SPECIALIZED_OCCUPATION: integer (nullable = true)\n |-- LOT_SPECIALIZED_OCCUPATION_NAME: string (nullable = true)\n |-- LOT_OCCUPATION_GROUP: integer (nullable = true)\n |-- LOT_OCCUPATION_GROUP_NAME: string (nullable = true)\n |-- LOT_V6_SPECIALIZED_OCCUPATION: integer (nullable = true)\n |-- LOT_V6_SPECIALIZED_OCCUPATION_NAME: string (nullable = true)\n |-- LOT_V6_OCCUPATION: integer (nullable = true)\n |-- LOT_V6_OCCUPATION_NAME: string (nullable = true)\n |-- LOT_V6_OCCUPATION_GROUP: integer (nullable = true)\n |-- LOT_V6_OCCUPATION_GROUP_NAME: string (nullable = true)\n |-- LOT_V6_CAREER_AREA: integer (nullable = true)\n |-- LOT_V6_CAREER_AREA_NAME: string (nullable = true)\n |-- SOC_2: string (nullable = true)\n |-- SOC_2_NAME: string (nullable = true)\n |-- SOC_3: string (nullable = true)\n |-- SOC_3_NAME: string (nullable = true)\n |-- SOC_4: string (nullable = true)\n |-- SOC_4_NAME: string (nullable = true)\n |-- SOC_5: string (nullable = true)\n |-- SOC_5_NAME: string (nullable = true)\n |-- LIGHTCAST_SECTORS: string (nullable = true)\n |-- LIGHTCAST_SECTORS_NAME: string (nullable = true)\n |-- NAICS_2022_2: integer (nullable = true)\n |-- NAICS_2022_2_NAME: string (nullable = true)\n |-- NAICS_2022_3: integer (nullable = true)\n |-- NAICS_2022_3_NAME: string (nullable = true)\n |-- NAICS_2022_4: integer (nullable = true)\n |-- NAICS_2022_4_NAME: string (nullable = true)\n |-- NAICS_2022_5: integer (nullable = true)\n |-- NAICS_2022_5_NAME: string (nullable = true)\n |-- NAICS_2022_6: integer (nullable = true)\n |-- NAICS_2022_6_NAME: string (nullable = true)\n |-- ai_label: string (nullable = true)\n\n```\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\ndf = df.select(\"TITLE_RAW\", \"SALARY\", \"LIGHTCAST_SECTORS\", \"NAICS_2022_6\", \"ai_label\")\n\n```\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nindexers = [\n    StringIndexer(inputCol=\"TITLE_RAW\", outputCol=\"job_title_enc\", handleInvalid=\"keep\"),\n    StringIndexer(inputCol=\"LIGHTCAST_SECTORS\", outputCol=\"industry_enc\", handleInvalid=\"keep\"),\n    StringIndexer(inputCol=\"NAICS_2022_6\", outputCol=\"naics_enc\", handleInvalid=\"keep\"),\n    StringIndexer(inputCol=\"ai_label\", outputCol=\"ai_enc\", handleInvalid=\"keep\")\n]\n\npipeline = Pipeline(stages=indexers)\ndf_indexed = pipeline.fit(df).transform(df)\n\nprint(\"Categorical variables encoded to numbers\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\r[Stage 2:>                                                          (0 + 1) / 1]\r\r[Stage 4:>                                                          (0 + 1) / 1]\r\r                                                                                \r\r[Stage 8:>                                                          (0 + 1) / 1]\r\r                                                                                \r\r[Stage 14:>                                                         (0 + 1) / 1]\r\r                                                                                \r\r[Stage 20:>                                                         (0 + 1) / 1]\r\r                                                                                \r\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nCategorical variables encoded to numbers\n```\n:::\n:::\n\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\ndf_indexed_clean = df_indexed.na.drop(subset=[\"job_title_enc\", \"SALARY\", \"industry_enc\", \"naics_enc\"])\n```\n:::\n\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nassembler = VectorAssembler(\n    inputCols=[\"job_title_enc\", \"industry_enc\", \"SALARY\", \"naics_enc\"],\n    outputCol=\"features\"\n)\ndf_features = assembler.transform(df_indexed_clean)\n```\n:::\n\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nscaler = StandardScaler(inputCol=\"features\", outputCol=\"scaled_features\")\nscaler_model = scaler.fit(df_features)\ndf_scaled = scaler_model.transform(df_features)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n25/10/01 01:31:40 WARN DAGScheduler: Broadcasting large task binary with size 2.1 MiB\n\r[Stage 26:>                                                         (0 + 1) / 1]\r25/10/01 01:31:46 WARN DAGScheduler: Broadcasting large task binary with size 2.1 MiB\n\r                                                                                \r\n```\n:::\n:::\n\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nfrom pyspark.ml.clustering import KMeans as SparkKMeans\nfrom sklearn.cluster import KMeans as SklearnKMeans\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Convert scaled features column to numpy array for scikit-learn KMeans\nX_scaled = np.array(df_scaled.select(\"scaled_features\").toPandas()[\"scaled_features\"].tolist())\n\n# Elbow method using scikit-learn KMeans\ninertias = []\nfor k in range(2, 11):\n    kmeans = SklearnKMeans(n_clusters=k, random_state=42, n_init=10)\n    kmeans.fit(X_scaled)\n    inertias.append(kmeans.inertia_)\n\nplt.figure(figsize=(8,5))\nplt.plot(range(2, 11), inertias, \"bo-\", linewidth=2)\nplt.xlabel(\"Number of Clusters (K)\")\nplt.ylabel(\"Inertia\")\nplt.title(\"Elbow Method for Optimal K\")\nplt.grid(True)\nplt.show()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n25/10/01 01:31:46 WARN DAGScheduler: Broadcasting large task binary with size 2005.8 KiB\n\r[Stage 29:>                                                         (0 + 1) / 1]\r\r                                                                                \r\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](ai_vs_traditional_files/figure-html/cell-11-output-2.png){}\n:::\n:::\n\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nkmeans = SparkKMeans(featuresCol=\"scaled_features\", predictionCol=\"cluster\", k=3, seed=42)\nmodel = kmeans.fit(df_scaled)\ndf_clustered = model.transform(df_scaled)\n\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n25/10/01 01:31:58 WARN DAGScheduler: Broadcasting large task binary with size 2.1 MiB\n\r[Stage 30:>                                                         (0 + 1) / 1]\r25/10/01 01:32:03 WARN DAGScheduler: Broadcasting large task binary with size 2.1 MiB\n\r                                                                                \r25/10/01 01:32:04 WARN DAGScheduler: Broadcasting large task binary with size 2.1 MiB\n\r[Stage 33:>                                                         (0 + 1) / 1]\r\r                                                                                \r25/10/01 01:32:14 WARN DAGScheduler: Broadcasting large task binary with size 2.1 MiB\n25/10/01 01:32:14 WARN DAGScheduler: Broadcasting large task binary with size 2.1 MiB\n25/10/01 01:32:15 WARN DAGScheduler: Broadcasting large task binary with size 2.1 MiB\n25/10/01 01:32:15 WARN DAGScheduler: Broadcasting large task binary with size 2.1 MiB\n25/10/01 01:32:15 WARN DAGScheduler: Broadcasting large task binary with size 2.1 MiB\n25/10/01 01:32:15 WARN DAGScheduler: Broadcasting large task binary with size 2.1 MiB\n25/10/01 01:32:16 WARN DAGScheduler: Broadcasting large task binary with size 2.1 MiB\n25/10/01 01:32:16 WARN DAGScheduler: Broadcasting large task binary with size 2.1 MiB\n25/10/01 01:32:16 WARN DAGScheduler: Broadcasting large task binary with size 2.1 MiB\n25/10/01 01:32:16 WARN DAGScheduler: Broadcasting large task binary with size 2.1 MiB\n25/10/01 01:32:17 WARN DAGScheduler: Broadcasting large task binary with size 2.1 MiB\n25/10/01 01:32:17 WARN DAGScheduler: Broadcasting large task binary with size 2.1 MiB\n25/10/01 01:32:17 WARN DAGScheduler: Broadcasting large task binary with size 2.1 MiB\n25/10/01 01:32:17 WARN DAGScheduler: Broadcasting large task binary with size 2.1 MiB\n25/10/01 01:32:17 WARN DAGScheduler: Broadcasting large task binary with size 2.1 MiB\n25/10/01 01:32:18 WARN DAGScheduler: Broadcasting large task binary with size 2.1 MiB\n25/10/01 01:32:18 WARN DAGScheduler: Broadcasting large task binary with size 2.1 MiB\n\r[Stage 61:>                                                         (0 + 1) / 1]\r25/10/01 01:32:23 WARN DAGScheduler: Broadcasting large task binary with size 2.1 MiB\n\r                                                                                \r\n```\n:::\n:::\n\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\ndf_clean = df_clustered.select(\n    \"cluster\", \n    \"SALARY\", \n    \"ai_label\", \n    \"TITLE_RAW\", \n    \"LIGHTCAST_SECTORS\",\n    \"job_title_enc\",\n    \"industry_enc\",\n    \"naics_enc\"\n)\n```\n:::\n\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\n##Salary Comparison\nprint(\"\\n\" + \"=\"*80)\nprint(\"1. SALARY COMPARISON\")\nprint(\"=\"*80)\n\nsalary_comparison = df_clean.groupBy(\"ai_label\").agg(\n    F.mean(\"SALARY\").alias(\"mean\"),\n    F.expr(\"percentile_approx(SALARY, 0.5)\").alias(\"median\"),\n    F.stddev(\"SALARY\").alias(\"std\"),\n    F.count(\"SALARY\").alias(\"count\")\n)\n\nsalary_comparison.show()\n\n\nai_salary = salary_comparison.filter(F.col(\"ai_label\") == \"AI\").select(\"mean\").collect()[0][0]\nnon_ai_salary = salary_comparison.filter(F.col(\"ai_label\") == \"Non-AI\").select(\"mean\").collect()[0][0]\nsalary_diff = ai_salary - non_ai_salary\n\nprint(\"\\nAI roles pay $\" + str(round(salary_diff, 2)) + \" more on average\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n================================================================================\n1. SALARY COMPARISON\n================================================================================\n+--------+------------------+------+-----------------+-----+\n|ai_label|              mean|median|              std|count|\n+--------+------------------+------+-----------------+-----+\n|  Non-AI|117941.15075622052|116250|45152.38145036823|30745|\n|      AI|124104.84126984127|129529|34684.41113080237|   63|\n+--------+------------------+------+-----------------+-----+\n\n\nAI roles pay $6163.69 more on average\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n25/10/01 01:32:24 WARN DAGScheduler: Broadcasting large task binary with size 2.1 MiB\n\r[Stage 64:>                                                         (0 + 1) / 1]\r25/10/01 01:32:29 WARN DAGScheduler: Broadcasting large task binary with size 2.1 MiB\n\r                                                                                \r25/10/01 01:32:30 WARN DAGScheduler: Broadcasting large task binary with size 2.1 MiB\n\r[Stage 67:>                                                         (0 + 1) / 1]\r25/10/01 01:32:35 WARN DAGScheduler: Broadcasting large task binary with size 2.1 MiB\n\r                                                                                \r25/10/01 01:32:35 WARN DAGScheduler: Broadcasting large task binary with size 2.1 MiB\n\r[Stage 70:>                                                         (0 + 1) / 1]\r25/10/01 01:32:40 WARN DAGScheduler: Broadcasting large task binary with size 2.1 MiB\n\r                                                                                \r\n```\n:::\n:::\n\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\n##Job Title Comparison\nprint(\"\\n\" + \"=\"*80)\nprint(\"2. TOP JOB TITLES\")\nprint(\"=\"*80)\n\nprint(\"\\nTop 10 Non-AI Job Titles:\")\n(df_clean.filter(F.col(\"ai_label\") == \"Non-AI\")\n    .groupBy(\"TITLE_RAW\")\n    .count()\n    .orderBy(F.desc(\"count\"))\n    .show(10, truncate=False))\n\nprint(\"\\nTop 10 AI Job Titles:\")\n(df_clean.filter(F.col(\"ai_label\") == \"AI\")\n    .groupBy(\"TITLE_RAW\")\n    .count()\n    .orderBy(F.desc(\"count\"))\n    .show(10, truncate=False))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n================================================================================\n2. TOP JOB TITLES\n================================================================================\n\nTop 10 Non-AI Job Titles:\n+-----------------------------------------------------+-----+\n|TITLE_RAW                                            |count|\n+-----------------------------------------------------+-----+\n|Data Analyst                                         |1865 |\n|Business Intelligence Analyst                        |302  |\n|Senior Data Analyst                                  |287  |\n|Enterprise Architect                                 |274  |\n|Oracle HCM Cloud Implementation Lead - Core HR Module|134  |\n|Data Engineer, Analytics                             |120  |\n|Data and Reporting Professional 2                    |115  |\n|Lead Data Analyst                                    |109  |\n|Solution Architect                                   |103  |\n|Data Management Analyst                              |78   |\n+-----------------------------------------------------+-----+\nonly showing top 10 rows\n\nTop 10 AI Job Titles:\n+-----------------------------------------------------------------------------------------------------------------------------------------+-----+\n|TITLE_RAW                                                                                                                                |count|\n+-----------------------------------------------------------------------------------------------------------------------------------------+-----+\n|Data Scientist/Analyst                                                                                                                   |10   |\n|Data Analyst/Data Scientist                                                                                                              |3    |\n|Generative Artificial Intelligence (AI) Cybersecurity Architect                                                                          |3    |\n|Enterprise Artificial Intelligence & Machine Learning (AI / ML) Platform Product Manager - Senior Lead Data Product Management Consultant|2    |\n|Data Scientist/Policy Analyst                                                                                                            |2    |\n|Data Scientist/Business Intelligence Analyst (remote)                                                                                    |2    |\n|Sr BI Analyst/Data Scientist                                                                                                             |2    |\n|Data Scientist / Data Analyst                                                                                                            |2    |\n|Artificial Intelligence (AI) Cybersecurity Architect                                                                                     |1    |\n|Data Scientist Analyst, - Clearance Required                                                                                             |1    |\n+-----------------------------------------------------------------------------------------------------------------------------------------+-----+\nonly showing top 10 rows\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n25/10/01 01:32:41 WARN DAGScheduler: Broadcasting large task binary with size 2.1 MiB\n\r[Stage 73:>                                                         (0 + 1) / 1]\r25/10/01 01:32:46 WARN DAGScheduler: Broadcasting large task binary with size 2.1 MiB\n\r                                                                                \r25/10/01 01:32:47 WARN DAGScheduler: Broadcasting large task binary with size 2.1 MiB\n\r[Stage 76:>                                                         (0 + 1) / 1]\r25/10/01 01:32:52 WARN DAGScheduler: Broadcasting large task binary with size 2.1 MiB\n\r                                                                                \r\n```\n:::\n:::\n\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\n##Cluster Distribution\nprint(\"\\n\" + \"=\"*80)\nprint(\"3. CLUSTER DISTRIBUTION BY AI LABEL\")\nprint(\"=\"*80)\n\ncluster_dist = (df_clean.groupBy(\"cluster\", \"ai_label\")\n        .count()\n        .orderBy(\"cluster\", \"ai_label\")\n)\ncluster_dist.show()\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n================================================================================\n3. CLUSTER DISTRIBUTION BY AI LABEL\n================================================================================\n+-------+--------+-----+\n|cluster|ai_label|count|\n+-------+--------+-----+\n|      0|      AI|   14|\n|      0|  Non-AI|21227|\n|      1|      AI|   45|\n|      1|  Non-AI| 7585|\n|      2|      AI|    4|\n|      2|  Non-AI| 1933|\n+-------+--------+-----+\n\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n25/10/01 01:32:52 WARN DAGScheduler: Broadcasting large task binary with size 2.1 MiB\n\r[Stage 79:>                                                         (0 + 1) / 1]\r25/10/01 01:32:57 WARN DAGScheduler: Broadcasting large task binary with size 2.1 MiB\n\r                                                                                \r\n```\n:::\n:::\n\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\n##Industry Comparison\nprint(\"\\n\" + \"=\"*80)\nprint(\"4. Industry Comparison\")\nprint(\"=\"*80)\n\nprint(\"\\nTop 10 Non-AI Industries:\")\n(df_clean.filter(F.col(\"ai_label\") == \"Non-AI\")\n        .groupBy(\"LIGHTCAST_SECTORS\")\n        .count()\n        .orderBy(F.desc(\"count\"))\n        .show(10, truncate = False)\n)\n\nprint(\"\\nTop 10 AI Industries:\")\n(df_clean.filter(F.col(\"ai_label\") == \"AI\")\n        .groupBy(\"LIGHTCAST_SECTORS\")\n        .count()\n        .orderBy(F.desc(\"count\"))\n        .show(10, truncate = False)\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n================================================================================\n4. Industry Comparison\n================================================================================\n\nTop 10 Non-AI Industries:\n+---------------------+-----+\n|LIGHTCAST_SECTORS    |count|\n+---------------------+-----+\n|NULL                 |22697|\n|[\\n  7\\n]            |3048 |\n|[\\n  6\\n]            |2081 |\n|[\\n  5\\n]            |959  |\n|[\\n  6,\\n  7\\n]      |641  |\n|[\\n  3\\n]            |367  |\n|[\\n  5,\\n  7\\n]      |345  |\n|[\\n  5,\\n  6\\n]      |172  |\n|[\\n  3,\\n  5\\n]      |86   |\n|[\\n  3,\\n  5,\\n  6\\n]|72   |\n+---------------------+-----+\nonly showing top 10 rows\n\nTop 10 AI Industries:\n+-----------------+-----+\n|LIGHTCAST_SECTORS|count|\n+-----------------+-----+\n|[\\n  7\\n]        |22   |\n|[\\n  5,\\n  7\\n]  |17   |\n|NULL             |17   |\n|[\\n  6\\n]        |3    |\n|[\\n  6,\\n  7\\n]  |3    |\n|[\\n  3,\\n  7\\n]  |1    |\n+-----------------+-----+\n\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n25/10/01 01:32:58 WARN DAGScheduler: Broadcasting large task binary with size 2.1 MiB\n\r[Stage 82:>                                                         (0 + 1) / 1]\r25/10/01 01:33:03 WARN DAGScheduler: Broadcasting large task binary with size 2.1 MiB\n\r                                                                                \r25/10/01 01:33:03 WARN DAGScheduler: Broadcasting large task binary with size 2.1 MiB\n\r[Stage 85:>                                                         (0 + 1) / 1]\r25/10/01 01:33:08 WARN DAGScheduler: Broadcasting large task binary with size 2.1 MiB\n\r                                                                                \r\n```\n:::\n:::\n\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\n##Salary by Industry\nprint(\"\\n\" + \"=\"*80)\nprint(\"5. AVERAGE SALARY BY INDUSTRY (Top 10)\")\nprint(\"=\"*80)\n\nprint(\"\\nNon-AI Roles - Top 10 Industries by Average Salary:\")\n(df_clean.filter(F.col(\"ai_label\")==\"Non-AI\")\n        .groupBy(\"LIGHTCAST_SECTORS\")\n        .agg(F.mean(\"SALARY\").alias(\"avg_salary\"), F.count(\"SALARY\").alias(\"job_count\") )\n        .filter(F.col(\"job_count\")>=10)\n        .orderBy(F.desc(\"avg_salary\"))\n        .show(10,truncate=False)   \n)\n\nprint(\"\\nAI Roles - Top 10 Industries by Average Salary:\")\n(df_clean.filter(F.col(\"ai_label\")==\"AI\")\n        .groupBy(\"LIGHTCAST_SECTORS\")\n        .agg(F.mean(\"SALARY\").alias(\"avg_salary\"), F.count(\"SALARY\").alias(\"job_count\") )\n        .filter(F.col(\"job_count\")>=10)\n        .orderBy(F.desc(\"avg_salary\"))\n        .show(10,truncate=False)   \n)\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n================================================================================\n5. AVERAGE SALARY BY INDUSTRY (Top 10)\n================================================================================\n\nNon-AI Roles - Top 10 Industries by Average Salary:\n+---------------------------+------------------+---------+\n|LIGHTCAST_SECTORS          |avg_salary        |job_count|\n+---------------------------+------------------+---------+\n|[\\n  3,\\n  6\\n]            |150087.14814814815|27       |\n|[\\n  5,\\n  6,\\n  7\\n]      |149811.75862068965|29       |\n|[\\n  3,\\n  7\\n]            |147118.65714285715|70       |\n|[\\n  5,\\n  7\\n]            |141717.04347826086|345      |\n|[\\n  5\\n]                  |140837.93117831074|959      |\n|[\\n  5,\\n  6\\n]            |137774.48837209304|172      |\n|[\\n  3,\\n  5\\n]            |136432.16279069768|86       |\n|[\\n  3,\\n  5,\\n  6,\\n  7\\n]|134204.16666666666|24       |\n|[\\n  6,\\n  7\\n]            |130184.78471138845|641      |\n|[\\n  7\\n]                  |129276.98293963255|3048     |\n+---------------------------+------------------+---------+\nonly showing top 10 rows\n\nAI Roles - Top 10 Industries by Average Salary:\n+-----------------+------------------+---------+\n|LIGHTCAST_SECTORS|avg_salary        |job_count|\n+-----------------+------------------+---------+\n|[\\n  5,\\n  7\\n]  |138947.0588235294 |17       |\n|[\\n  7\\n]        |119115.68181818182|22       |\n|NULL             |111712.88235294117|17       |\n+-----------------+------------------+---------+\n\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n25/10/01 01:33:08 WARN DAGScheduler: Broadcasting large task binary with size 2.1 MiB\n\r[Stage 88:>                                                         (0 + 1) / 1]\r25/10/01 01:33:14 WARN DAGScheduler: Broadcasting large task binary with size 2.1 MiB\n\r                                                                                \r25/10/01 01:33:14 WARN DAGScheduler: Broadcasting large task binary with size 2.1 MiB\n\r[Stage 91:>                                                         (0 + 1) / 1]\r25/10/01 01:33:19 WARN DAGScheduler: Broadcasting large task binary with size 2.1 MiB\n\r                                                                                \r\n```\n:::\n:::\n\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\npdf = df_clean.sample(fraction=0.1, seed=42).toPandas()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n25/10/01 01:33:19 WARN DAGScheduler: Broadcasting large task binary with size 2019.2 KiB\n\r[Stage 94:>                                                         (0 + 1) / 1]\r\r                                                                                \r\n```\n:::\n:::\n\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\n# Interactive EDA: Pairwise Plots with HoloViz\ncols = [\"SALARY\", \"job_title_enc\", \"industry_enc\", \"naics_enc\"]\npdf[cols] = pdf[cols].apply(pd.to_numeric, errors='coerce')\npdf = pdf.dropna(subset=cols + [\"ai_label\"])\n\nimport hvplot.pandas\nimport panel as pn\npn.extension()\n\n# Create scatter plots for all pairwise combinations\nplots = []\nfor x in cols:\n    for y in cols:\n        if x != y:\n            plot = pdf.hvplot.scatter(\n                x=x, \n                y=y, \n                by='ai_label',  # Color by AI vs Non-AI\n                width=450, \n                height=250, \n                alpha=0.6, \n                title=f\"{y} vs {x}\"\n            )\n            plots.append(plot)\n\n# Display plots in a grid layout with 2 columns\npn.panel(pn.GridBox(*plots, ncols=2)).show()\n\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<script type=\"esms-options\">{\"shimMode\": true}</script><style>*[data-root-id],\n*[data-root-id] > * {\n  box-sizing: border-box;\n  font-family: var(--jp-ui-font-family);\n  font-size: var(--jp-ui-font-size1);\n  color: var(--vscode-editor-foreground, var(--jp-ui-font-color1));\n}\n\n/* Override VSCode background color */\n.cell-output-ipywidget-background:has(\n  > .cell-output-ipywidget-background > .lm-Widget > *[data-root-id]\n),\n.cell-output-ipywidget-background:has(> .lm-Widget > *[data-root-id]) {\n  background-color: transparent !important;\n}\n</style>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<script type=\"application/javascript\">\n(function(root) {\n  function now() {\n    return new Date();\n  }\n\n  const force = true;\n  const py_version = '3.8.0'.replace('rc', '-rc.').replace('.dev', '-dev.');\n  const reloading = false;\n  const Bokeh = root.Bokeh;\n\n  // Set a timeout for this load but only if we are not already initializing\n  if (typeof (root._bokeh_timeout) === \"undefined\" || (force || !root._bokeh_is_initializing)) {\n    root._bokeh_timeout = Date.now() + 5000;\n    root._bokeh_failed_load = false;\n  }\n\n  function run_callbacks() {\n    try {\n      root._bokeh_onload_callbacks.forEach(function(callback) {\n        if (callback != null)\n          callback();\n      });\n    } finally {\n      delete root._bokeh_onload_callbacks;\n    }\n    console.debug(\"Bokeh: all callbacks have finished\");\n  }\n\n  function load_libs(css_urls, js_urls, js_modules, js_exports, callback) {\n    if (css_urls == null) css_urls = [];\n    if (js_urls == null) js_urls = [];\n    if (js_modules == null) js_modules = [];\n    if (js_exports == null) js_exports = {};\n\n    root._bokeh_onload_callbacks.push(callback);\n\n    if (root._bokeh_is_loading > 0) {\n      // Don't load bokeh if it is still initializing\n      console.debug(\"Bokeh: BokehJS is being loaded, scheduling callback at\", now());\n      return null;\n    } else if (js_urls.length === 0 && js_modules.length === 0 && Object.keys(js_exports).length === 0) {\n      // There is nothing to load\n      run_callbacks();\n      return null;\n    }\n\n    function on_load() {\n      root._bokeh_is_loading--;\n      if (root._bokeh_is_loading === 0) {\n        console.debug(\"Bokeh: all BokehJS libraries/stylesheets loaded\");\n        run_callbacks()\n      }\n    }\n    window._bokeh_on_load = on_load\n\n    function on_error(e) {\n      const src_el = e.srcElement\n      console.error(\"failed to load \" + (src_el.href || src_el.src));\n    }\n\n    const skip = [];\n    if (window.requirejs) {\n      window.requirejs.config({'packages': {}, 'paths': {}, 'shim': {}});\n      root._bokeh_is_loading = css_urls.length + 0;\n    } else {\n      root._bokeh_is_loading = css_urls.length + js_urls.length + js_modules.length + Object.keys(js_exports).length;\n    }\n\n    const existing_stylesheets = []\n    const links = document.getElementsByTagName('link')\n    for (let i = 0; i < links.length; i++) {\n      const link = links[i]\n      if (link.href != null) {\n        existing_stylesheets.push(link.href)\n      }\n    }\n    for (let i = 0; i < css_urls.length; i++) {\n      const url = css_urls[i];\n      const escaped = encodeURI(url)\n      if (existing_stylesheets.indexOf(escaped) !== -1) {\n        on_load()\n        continue;\n      }\n      const element = document.createElement(\"link\");\n      element.onload = on_load;\n      element.onerror = on_error;\n      element.rel = \"stylesheet\";\n      element.type = \"text/css\";\n      element.href = url;\n      console.debug(\"Bokeh: injecting link tag for BokehJS stylesheet: \", url);\n      document.body.appendChild(element);\n    }    var existing_scripts = []\n    const scripts = document.getElementsByTagName('script')\n    for (let i = 0; i < scripts.length; i++) {\n      var script = scripts[i]\n      if (script.src != null) {\n        existing_scripts.push(script.src)\n      }\n    }\n    for (let i = 0; i < js_urls.length; i++) {\n      const url = js_urls[i];\n      const escaped = encodeURI(url)\n      if (skip.indexOf(escaped) !== -1 || existing_scripts.indexOf(escaped) !== -1) {\n        if (!window.requirejs) {\n          on_load();\n        }\n        continue;\n      }\n      const element = document.createElement('script');\n      element.onload = on_load;\n      element.onerror = on_error;\n      element.async = false;\n      element.src = url;\n      console.debug(\"Bokeh: injecting script tag for BokehJS library: \", url);\n      document.head.appendChild(element);\n    }\n    for (let i = 0; i < js_modules.length; i++) {\n      const url = js_modules[i];\n      const escaped = encodeURI(url)\n      if (skip.indexOf(escaped) !== -1 || existing_scripts.indexOf(escaped) !== -1) {\n        if (!window.requirejs) {\n          on_load();\n        }\n        continue;\n      }\n      var element = document.createElement('script');\n      element.onload = on_load;\n      element.onerror = on_error;\n      element.async = false;\n      element.src = url;\n      element.type = \"module\";\n      console.debug(\"Bokeh: injecting script tag for BokehJS library: \", url);\n      document.head.appendChild(element);\n    }\n    for (const name in js_exports) {\n      const url = js_exports[name];\n      const escaped = encodeURI(url)\n      if (skip.indexOf(escaped) >= 0 || root[name] != null) {\n        if (!window.requirejs) {\n          on_load();\n        }\n        continue;\n      }\n      var element = document.createElement('script');\n      element.onerror = on_error;\n      element.async = false;\n      element.type = \"module\";\n      console.debug(\"Bokeh: injecting script tag for BokehJS library: \", url);\n      element.textContent = `\n      import ${name} from \"${url}\"\n      window.${name} = ${name}\n      window._bokeh_on_load()\n      `\n      document.head.appendChild(element);\n    }\n    if (!js_urls.length && !js_modules.length) {\n      on_load()\n    }\n  };\n\n  function inject_raw_css(css) {\n    const element = document.createElement(\"style\");\n    element.appendChild(document.createTextNode(css));\n    document.body.appendChild(element);\n  }\n\n  const js_urls = [\"https://cdn.holoviz.org/panel/1.8.1/dist/bundled/reactiveesm/es-module-shims@^1.10.0/dist/es-module-shims.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-3.8.0.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-gl-3.8.0.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-widgets-3.8.0.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-tables-3.8.0.min.js\", \"https://cdn.holoviz.org/panel/1.8.1/dist/panel.min.js\"];\n  const js_modules = [];\n  const js_exports = {};\n  const css_urls = [];\n  const inline_js = [    function(Bokeh) {\n      Bokeh.set_log_level(\"info\");\n    },\nfunction(Bokeh) {} // ensure no trailing comma for IE\n  ];\n\n  function run_inline_js() {\n    if ((root.Bokeh !== undefined) || (force === true)) {\n      for (let i = 0; i < inline_js.length; i++) {\n        try {\n          inline_js[i].call(root, root.Bokeh);\n        } catch(e) {\n          if (!reloading) {\n            throw e;\n          }\n        }\n      }\n      // Cache old bokeh versions\n      if (Bokeh != undefined && !reloading) {\n        var NewBokeh = root.Bokeh;\n        if (Bokeh.versions === undefined) {\n          Bokeh.versions = new Map();\n        }\n        if (NewBokeh.version !== Bokeh.version) {\n          Bokeh.versions.set(NewBokeh.version, NewBokeh)\n        }\n        root.Bokeh = Bokeh;\n      }\n    } else if (Date.now() < root._bokeh_timeout) {\n      setTimeout(run_inline_js, 100);\n    } else if (!root._bokeh_failed_load) {\n      console.log(\"Bokeh: BokehJS failed to load within specified timeout.\");\n      root._bokeh_failed_load = true;\n    }\n    root._bokeh_is_initializing = false\n  }\n\n  function load_or_wait() {\n    // Implement a backoff loop that tries to ensure we do not load multiple\n    // versions of Bokeh and its dependencies at the same time.\n    // In recent versions we use the root._bokeh_is_initializing flag\n    // to determine whether there is an ongoing attempt to initialize\n    // bokeh, however for backward compatibility we also try to ensure\n    // that we do not start loading a newer (Panel>=1.0 and Bokeh>3) version\n    // before older versions are fully initialized.\n    if (root._bokeh_is_initializing && Date.now() > root._bokeh_timeout) {\n      // If the timeout and bokeh was not successfully loaded we reset\n      // everything and try loading again\n      root._bokeh_timeout = Date.now() + 5000;\n      root._bokeh_is_initializing = false;\n      root._bokeh_onload_callbacks = undefined;\n      root._bokeh_is_loading = 0\n      console.log(\"Bokeh: BokehJS was loaded multiple times but one version failed to initialize.\");\n      load_or_wait();\n    } else if (root._bokeh_is_initializing || (typeof root._bokeh_is_initializing === \"undefined\" && root._bokeh_onload_callbacks !== undefined)) {\n      setTimeout(load_or_wait, 100);\n    } else {\n      root._bokeh_is_initializing = true\n      root._bokeh_onload_callbacks = []\n      const bokeh_loaded = root.Bokeh != null && (root.Bokeh.version === py_version || (root.Bokeh.versions !== undefined && root.Bokeh.versions.has(py_version)));\n      if (!reloading && !bokeh_loaded) {\n        if (root.Bokeh) {\n          root.Bokeh = undefined;\n        }\n        console.debug(\"Bokeh: BokehJS not loaded, scheduling load and callback at\", now());\n      }\n      load_libs(css_urls, js_urls, js_modules, js_exports, function() {\n        console.debug(\"Bokeh: BokehJS plotting callback run at\", now());\n        run_inline_js();\n      });\n    }\n  }\n  // Give older versions of the autoload script a head-start to ensure\n  // they initialize before we start loading newer version.\n  setTimeout(load_or_wait, 100)\n}(window));\n</script>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<script type=\"application/javascript\">\n\nif ((window.PyViz === undefined) || (window.PyViz instanceof HTMLElement)) {\n  window.PyViz = {comms: {}, comm_status:{}, kernels:{}, receivers: {}, plot_index: []}\n}\n\n\n    function JupyterCommManager() {\n    }\n\n    JupyterCommManager.prototype.register_target = function(plot_id, comm_id, msg_handler) {\n      if (window.comm_manager || ((window.Jupyter !== undefined) && (Jupyter.notebook.kernel != null))) {\n        var comm_manager = window.comm_manager || Jupyter.notebook.kernel.comm_manager;\n        comm_manager.register_target(comm_id, function(comm) {\n          comm.on_msg(msg_handler);\n        });\n      } else if ((plot_id in window.PyViz.kernels) && (window.PyViz.kernels[plot_id])) {\n        window.PyViz.kernels[plot_id].registerCommTarget(comm_id, function(comm) {\n          comm.onMsg = msg_handler;\n        });\n      } else if (typeof google != 'undefined' && google.colab.kernel != null) {\n        google.colab.kernel.comms.registerTarget(comm_id, (comm) => {\n          var messages = comm.messages[Symbol.asyncIterator]();\n          function processIteratorResult(result) {\n            var message = result.value;\n            var content = {data: message.data, comm_id};\n            var buffers = []\n            for (var buffer of message.buffers || []) {\n              buffers.push(new DataView(buffer))\n            }\n            var metadata = message.metadata || {};\n            var msg = {content, buffers, metadata}\n            msg_handler(msg);\n            return messages.next().then(processIteratorResult);\n          }\n          return messages.next().then(processIteratorResult);\n        })\n      }\n    }\n\n    JupyterCommManager.prototype.get_client_comm = function(plot_id, comm_id, msg_handler) {\n      if (comm_id in window.PyViz.comms) {\n        return window.PyViz.comms[comm_id];\n      } else if (window.comm_manager || ((window.Jupyter !== undefined) && (Jupyter.notebook.kernel != null))) {\n        var comm_manager = window.comm_manager || Jupyter.notebook.kernel.comm_manager;\n        var comm = comm_manager.new_comm(comm_id, {}, {}, {}, comm_id);\n        if (msg_handler) {\n          comm.on_msg(msg_handler);\n        }\n      } else if ((plot_id in window.PyViz.kernels) && (window.PyViz.kernels[plot_id])) {\n        var comm = window.PyViz.kernels[plot_id].connectToComm(comm_id);\n        let retries = 0;\n        const open = () => {\n          if (comm.active) {\n            comm.open();\n          } else if (retries > 3) {\n            console.warn('Comm target never activated')\n          } else {\n            retries += 1\n            setTimeout(open, 500)\n          }\n        }\n        if (comm.active) {\n          comm.open();\n        } else {\n          setTimeout(open, 500)\n        }\n        if (msg_handler) {\n          comm.onMsg = msg_handler;\n        }\n      } else if (typeof google != 'undefined' && google.colab.kernel != null) {\n        var comm_promise = google.colab.kernel.comms.open(comm_id)\n        comm_promise.then((comm) => {\n          window.PyViz.comms[comm_id] = comm;\n          if (msg_handler) {\n            var messages = comm.messages[Symbol.asyncIterator]();\n            function processIteratorResult(result) {\n              var message = result.value;\n              var content = {data: message.data};\n              var metadata = message.metadata || {comm_id};\n              var msg = {content, metadata}\n              msg_handler(msg);\n              return messages.next().then(processIteratorResult);\n            }\n            return messages.next().then(processIteratorResult);\n          }\n        })\n        var sendClosure = (data, metadata, buffers, disposeOnDone) => {\n          return comm_promise.then((comm) => {\n            comm.send(data, metadata, buffers, disposeOnDone);\n          });\n        };\n        var comm = {\n          send: sendClosure\n        };\n      }\n      window.PyViz.comms[comm_id] = comm;\n      return comm;\n    }\n    window.PyViz.comm_manager = new JupyterCommManager();\n    \n\n\nvar JS_MIME_TYPE = 'application/javascript';\nvar HTML_MIME_TYPE = 'text/html';\nvar EXEC_MIME_TYPE = 'application/vnd.holoviews_exec.v0+json';\nvar CLASS_NAME = 'output';\n\n/**\n * Render data to the DOM node\n */\nfunction render(props, node) {\n  var div = document.createElement(\"div\");\n  var script = document.createElement(\"script\");\n  node.appendChild(div);\n  node.appendChild(script);\n}\n\n/**\n * Handle when a new output is added\n */\nfunction handle_add_output(event, handle) {\n  var output_area = handle.output_area;\n  var output = handle.output;\n  if ((output.data == undefined) || (!output.data.hasOwnProperty(EXEC_MIME_TYPE))) {\n    return\n  }\n  var id = output.metadata[EXEC_MIME_TYPE][\"id\"];\n  var toinsert = output_area.element.find(\".\" + CLASS_NAME.split(' ')[0]);\n  if (id !== undefined) {\n    var nchildren = toinsert.length;\n    var html_node = toinsert[nchildren-1].children[0];\n    html_node.innerHTML = output.data[HTML_MIME_TYPE];\n    var scripts = [];\n    var nodelist = html_node.querySelectorAll(\"script\");\n    for (var i in nodelist) {\n      if (nodelist.hasOwnProperty(i)) {\n        scripts.push(nodelist[i])\n      }\n    }\n\n    scripts.forEach( function (oldScript) {\n      var newScript = document.createElement(\"script\");\n      var attrs = [];\n      var nodemap = oldScript.attributes;\n      for (var j in nodemap) {\n        if (nodemap.hasOwnProperty(j)) {\n          attrs.push(nodemap[j])\n        }\n      }\n      attrs.forEach(function(attr) { newScript.setAttribute(attr.name, attr.value) });\n      newScript.appendChild(document.createTextNode(oldScript.innerHTML));\n      oldScript.parentNode.replaceChild(newScript, oldScript);\n    });\n    if (JS_MIME_TYPE in output.data) {\n      toinsert[nchildren-1].children[1].textContent = output.data[JS_MIME_TYPE];\n    }\n    output_area._hv_plot_id = id;\n    if ((window.Bokeh !== undefined) && (id in Bokeh.index)) {\n      window.PyViz.plot_index[id] = Bokeh.index[id];\n    } else {\n      window.PyViz.plot_index[id] = null;\n    }\n  } else if (output.metadata[EXEC_MIME_TYPE][\"server_id\"] !== undefined) {\n    var bk_div = document.createElement(\"div\");\n    bk_div.innerHTML = output.data[HTML_MIME_TYPE];\n    var script_attrs = bk_div.children[0].attributes;\n    for (var i = 0; i < script_attrs.length; i++) {\n      toinsert[toinsert.length - 1].childNodes[1].setAttribute(script_attrs[i].name, script_attrs[i].value);\n    }\n    // store reference to server id on output_area\n    output_area._bokeh_server_id = output.metadata[EXEC_MIME_TYPE][\"server_id\"];\n  }\n}\n\n/**\n * Handle when an output is cleared or removed\n */\nfunction handle_clear_output(event, handle) {\n  var id = handle.cell.output_area._hv_plot_id;\n  var server_id = handle.cell.output_area._bokeh_server_id;\n  if (((id === undefined) || !(id in PyViz.plot_index)) && (server_id !== undefined)) { return; }\n  var comm = window.PyViz.comm_manager.get_client_comm(\"hv-extension-comm\", \"hv-extension-comm\", function () {});\n  if (server_id !== null) {\n    comm.send({event_type: 'server_delete', 'id': server_id});\n    return;\n  } else if (comm !== null) {\n    comm.send({event_type: 'delete', 'id': id});\n  }\n  delete PyViz.plot_index[id];\n  if ((window.Bokeh !== undefined) & (id in window.Bokeh.index)) {\n    var doc = window.Bokeh.index[id].model.document\n    doc.clear();\n    const i = window.Bokeh.documents.indexOf(doc);\n    if (i > -1) {\n      window.Bokeh.documents.splice(i, 1);\n    }\n  }\n}\n\n/**\n * Handle kernel restart event\n */\nfunction handle_kernel_cleanup(event, handle) {\n  delete PyViz.comms[\"hv-extension-comm\"];\n  window.PyViz.plot_index = {}\n}\n\n/**\n * Handle update_display_data messages\n */\nfunction handle_update_output(event, handle) {\n  handle_clear_output(event, {cell: {output_area: handle.output_area}})\n  handle_add_output(event, handle)\n}\n\nfunction register_renderer(events, OutputArea) {\n  function append_mime(data, metadata, element) {\n    // create a DOM node to render to\n    var toinsert = this.create_output_subarea(\n    metadata,\n    CLASS_NAME,\n    EXEC_MIME_TYPE\n    );\n    this.keyboard_manager.register_events(toinsert);\n    // Render to node\n    var props = {data: data, metadata: metadata[EXEC_MIME_TYPE]};\n    render(props, toinsert[0]);\n    element.append(toinsert);\n    return toinsert\n  }\n\n  events.on('output_added.OutputArea', handle_add_output);\n  events.on('output_updated.OutputArea', handle_update_output);\n  events.on('clear_output.CodeCell', handle_clear_output);\n  events.on('delete.Cell', handle_clear_output);\n  events.on('kernel_ready.Kernel', handle_kernel_cleanup);\n\n  OutputArea.prototype.register_mime_type(EXEC_MIME_TYPE, append_mime, {\n    safe: true,\n    index: 0\n  });\n}\n\nif (window.Jupyter !== undefined) {\n  try {\n    var events = require('base/js/events');\n    var OutputArea = require('notebook/js/outputarea').OutputArea;\n    if (OutputArea.prototype.mime_types().indexOf(EXEC_MIME_TYPE) == -1) {\n      register_renderer(events, OutputArea);\n    }\n  } catch(err) {\n  }\n}\n\n</script>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div id='f5d687b4-7188-4be7-9b26-92abd029ca07'>\n  <div id=\"bfb02cc9-c7dc-4293-809a-dcff8f81e05a\" data-root-id=\"f5d687b4-7188-4be7-9b26-92abd029ca07\" style=\"display: contents;\"></div>\n</div>\n<script type=\"application/javascript\">(function(root) {\n  var docs_json = {\"879f3bb2-2758-4fca-abd9-fa49096adbc3\":{\"version\":\"3.8.0\",\"title\":\"Bokeh Application\",\"config\":{\"type\":\"object\",\"name\":\"DocumentConfig\",\"id\":\"c00d78ab-1cf4-4ff9-9422-528d052ce30e\",\"attributes\":{\"notifications\":{\"type\":\"object\",\"name\":\"Notifications\",\"id\":\"10f802e6-0fe2-45d8-80e9-b30da938ba52\"}}},\"roots\":[{\"type\":\"object\",\"name\":\"panel.models.browser.BrowserInfo\",\"id\":\"f5d687b4-7188-4be7-9b26-92abd029ca07\"},{\"type\":\"object\",\"name\":\"panel.models.comm_manager.CommManager\",\"id\":\"305d267e-7c20-417e-a863-687649c84512\",\"attributes\":{\"plot_id\":\"f5d687b4-7188-4be7-9b26-92abd029ca07\",\"comm_id\":\"3926886a460c48948d1035bdeb07ebfb\",\"client_comm_id\":\"c1eca56b9acd4126a3ad53f565d09941\"}}],\"defs\":[{\"type\":\"model\",\"name\":\"ReactiveHTML1\"},{\"type\":\"model\",\"name\":\"FlexBox1\",\"properties\":[{\"name\":\"align_content\",\"kind\":\"Any\",\"default\":\"flex-start\"},{\"name\":\"align_items\",\"kind\":\"Any\",\"default\":\"flex-start\"},{\"name\":\"flex_direction\",\"kind\":\"Any\",\"default\":\"row\"},{\"name\":\"flex_wrap\",\"kind\":\"Any\",\"default\":\"wrap\"},{\"name\":\"gap\",\"kind\":\"Any\",\"default\":\"\"},{\"name\":\"justify_content\",\"kind\":\"Any\",\"default\":\"flex-start\"}]},{\"type\":\"model\",\"name\":\"FloatPanel1\",\"properties\":[{\"name\":\"config\",\"kind\":\"Any\",\"default\":{\"type\":\"map\"}},{\"name\":\"contained\",\"kind\":\"Any\",\"default\":true},{\"name\":\"position\",\"kind\":\"Any\",\"default\":\"right-top\"},{\"name\":\"offsetx\",\"kind\":\"Any\",\"default\":null},{\"name\":\"offsety\",\"kind\":\"Any\",\"default\":null},{\"name\":\"theme\",\"kind\":\"Any\",\"default\":\"primary\"},{\"name\":\"status\",\"kind\":\"Any\",\"default\":\"normalized\"}]},{\"type\":\"model\",\"name\":\"GridStack1\",\"properties\":[{\"name\":\"ncols\",\"kind\":\"Any\",\"default\":null},{\"name\":\"nrows\",\"kind\":\"Any\",\"default\":null},{\"name\":\"allow_resize\",\"kind\":\"Any\",\"default\":true},{\"name\":\"allow_drag\",\"kind\":\"Any\",\"default\":true},{\"name\":\"state\",\"kind\":\"Any\",\"default\":[]}]},{\"type\":\"model\",\"name\":\"drag1\",\"properties\":[{\"name\":\"slider_width\",\"kind\":\"Any\",\"default\":5},{\"name\":\"slider_color\",\"kind\":\"Any\",\"default\":\"black\"},{\"name\":\"start\",\"kind\":\"Any\",\"default\":0},{\"name\":\"end\",\"kind\":\"Any\",\"default\":100},{\"name\":\"value\",\"kind\":\"Any\",\"default\":50}]},{\"type\":\"model\",\"name\":\"click1\",\"properties\":[{\"name\":\"terminal_output\",\"kind\":\"Any\",\"default\":\"\"},{\"name\":\"debug_name\",\"kind\":\"Any\",\"default\":\"\"},{\"name\":\"clears\",\"kind\":\"Any\",\"default\":0}]},{\"type\":\"model\",\"name\":\"ReactiveESM1\",\"properties\":[{\"name\":\"esm_constants\",\"kind\":\"Any\",\"default\":{\"type\":\"map\"}}]},{\"type\":\"model\",\"name\":\"JSComponent1\",\"properties\":[{\"name\":\"esm_constants\",\"kind\":\"Any\",\"default\":{\"type\":\"map\"}}]},{\"type\":\"model\",\"name\":\"ReactComponent1\",\"properties\":[{\"name\":\"use_shadow_dom\",\"kind\":\"Any\",\"default\":true},{\"name\":\"esm_constants\",\"kind\":\"Any\",\"default\":{\"type\":\"map\"}}]},{\"type\":\"model\",\"name\":\"AnyWidgetComponent1\",\"properties\":[{\"name\":\"use_shadow_dom\",\"kind\":\"Any\",\"default\":true},{\"name\":\"esm_constants\",\"kind\":\"Any\",\"default\":{\"type\":\"map\"}}]},{\"type\":\"model\",\"name\":\"FastWrapper1\",\"properties\":[{\"name\":\"object\",\"kind\":\"Any\",\"default\":null},{\"name\":\"style\",\"kind\":\"Any\",\"default\":null}]},{\"type\":\"model\",\"name\":\"NotificationArea1\",\"properties\":[{\"name\":\"js_events\",\"kind\":\"Any\",\"default\":{\"type\":\"map\"}},{\"name\":\"max_notifications\",\"kind\":\"Any\",\"default\":5},{\"name\":\"notifications\",\"kind\":\"Any\",\"default\":[]},{\"name\":\"position\",\"kind\":\"Any\",\"default\":\"bottom-right\"},{\"name\":\"_clear\",\"kind\":\"Any\",\"default\":0},{\"name\":\"types\",\"kind\":\"Any\",\"default\":[{\"type\":\"map\",\"entries\":[[\"type\",\"warning\"],[\"background\",\"#ffc107\"],[\"icon\",{\"type\":\"map\",\"entries\":[[\"className\",\"fas fa-exclamation-triangle\"],[\"tagName\",\"i\"],[\"color\",\"white\"]]}]]},{\"type\":\"map\",\"entries\":[[\"type\",\"info\"],[\"background\",\"#007bff\"],[\"icon\",{\"type\":\"map\",\"entries\":[[\"className\",\"fas fa-info-circle\"],[\"tagName\",\"i\"],[\"color\",\"white\"]]}]]}]}]},{\"type\":\"model\",\"name\":\"Notification\",\"properties\":[{\"name\":\"background\",\"kind\":\"Any\",\"default\":null},{\"name\":\"duration\",\"kind\":\"Any\",\"default\":3000},{\"name\":\"icon\",\"kind\":\"Any\",\"default\":null},{\"name\":\"message\",\"kind\":\"Any\",\"default\":\"\"},{\"name\":\"notification_type\",\"kind\":\"Any\",\"default\":null},{\"name\":\"_rendered\",\"kind\":\"Any\",\"default\":false},{\"name\":\"_destroyed\",\"kind\":\"Any\",\"default\":false}]},{\"type\":\"model\",\"name\":\"TemplateActions1\",\"properties\":[{\"name\":\"open_modal\",\"kind\":\"Any\",\"default\":0},{\"name\":\"close_modal\",\"kind\":\"Any\",\"default\":0}]},{\"type\":\"model\",\"name\":\"BootstrapTemplateActions1\",\"properties\":[{\"name\":\"open_modal\",\"kind\":\"Any\",\"default\":0},{\"name\":\"close_modal\",\"kind\":\"Any\",\"default\":0}]},{\"type\":\"model\",\"name\":\"TemplateEditor1\",\"properties\":[{\"name\":\"layout\",\"kind\":\"Any\",\"default\":[]}]},{\"type\":\"model\",\"name\":\"MaterialTemplateActions1\",\"properties\":[{\"name\":\"open_modal\",\"kind\":\"Any\",\"default\":0},{\"name\":\"close_modal\",\"kind\":\"Any\",\"default\":0}]},{\"type\":\"model\",\"name\":\"request_value1\",\"properties\":[{\"name\":\"fill\",\"kind\":\"Any\",\"default\":\"none\"},{\"name\":\"_synced\",\"kind\":\"Any\",\"default\":null},{\"name\":\"_request_sync\",\"kind\":\"Any\",\"default\":0}]},{\"type\":\"model\",\"name\":\"holoviews.plotting.bokeh.raster.HoverModel\",\"properties\":[{\"name\":\"xy\",\"kind\":\"Any\",\"default\":null},{\"name\":\"data\",\"kind\":\"Any\",\"default\":null}]}]}};\n  var render_items = [{\"docid\":\"879f3bb2-2758-4fca-abd9-fa49096adbc3\",\"roots\":{\"f5d687b4-7188-4be7-9b26-92abd029ca07\":\"bfb02cc9-c7dc-4293-809a-dcff8f81e05a\"},\"root_ids\":[\"f5d687b4-7188-4be7-9b26-92abd029ca07\"]}];\n  var docs = Object.values(docs_json)\n  if (!docs) {\n    return\n  }\n  const py_version = docs[0].version.replace('rc', '-rc.').replace('.dev', '-dev.')\n  async function embed_document(root) {\n    var Bokeh = get_bokeh(root)\n    await Bokeh.embed.embed_items_notebook(docs_json, render_items);\n    for (const render_item of render_items) {\n      for (const root_id of render_item.root_ids) {\n\tconst id_el = document.getElementById(root_id)\n\tif (id_el.children.length && id_el.children[0].hasAttribute('data-root-id')) {\n\t  const root_el = id_el.children[0]\n\t  root_el.id = root_el.id + '-rendered'\n\t  for (const child of root_el.children) {\n            // Ensure JupyterLab does not capture keyboard shortcuts\n            // see: https://jupyterlab.readthedocs.io/en/4.1.x/extension/notebook.html#keyboard-interaction-model\n\t    child.setAttribute('data-lm-suppress-shortcuts', 'true')\n\t  }\n\t}\n      }\n    }\n  }\n  function get_bokeh(root) {\n    if (root.Bokeh === undefined) {\n      return null\n    } else if (root.Bokeh.version !== py_version) {\n      if (root.Bokeh.versions === undefined || !root.Bokeh.versions.has(py_version)) {\n\treturn null\n      }\n      return root.Bokeh.versions.get(py_version);\n    } else if (root.Bokeh.version === py_version) {\n      return root.Bokeh\n    }\n    return null\n  }\n  function is_loaded(root) {\n    var Bokeh = get_bokeh(root)\n    return (Bokeh != null && Bokeh.Panel !== undefined)\n  }\n  if (is_loaded(root)) {\n    embed_document(root);\n  } else {\n    var attempts = 0;\n    var timer = setInterval(function(root) {\n      if (is_loaded(root)) {\n        clearInterval(timer);\n        embed_document(root);\n      } else if (document.readyState == \"complete\") {\n        attempts++;\n        if (attempts > 200) {\n          clearInterval(timer);\n\t  var Bokeh = get_bokeh(root)\n\t  if (Bokeh == null || Bokeh.Panel == null) {\n            console.warn(\"Panel: ERROR: Unable to run Panel code because Bokeh or Panel library is missing\");\n\t  } else {\n\t    console.warn(\"Panel: WARNING: Attempting to render but not all required libraries could be resolved.\")\n\t    embed_document(root)\n\t  }\n        }\n      }\n    }, 25, root)\n  }\n})(window);</script>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<script type=\"esms-options\">{\"shimMode\": true}</script><style>*[data-root-id],\n*[data-root-id] > * {\n  box-sizing: border-box;\n  font-family: var(--jp-ui-font-family);\n  font-size: var(--jp-ui-font-size1);\n  color: var(--vscode-editor-foreground, var(--jp-ui-font-color1));\n}\n\n/* Override VSCode background color */\n.cell-output-ipywidget-background:has(\n  > .cell-output-ipywidget-background > .lm-Widget > *[data-root-id]\n),\n.cell-output-ipywidget-background:has(> .lm-Widget > *[data-root-id]) {\n  background-color: transparent !important;\n}\n</style>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<script type=\"application/javascript\">\n(function(root) {\n  function now() {\n    return new Date();\n  }\n\n  const force = false;\n  const py_version = '3.8.0'.replace('rc', '-rc.').replace('.dev', '-dev.');\n  const reloading = true;\n  const Bokeh = root.Bokeh;\n\n  // Set a timeout for this load but only if we are not already initializing\n  if (typeof (root._bokeh_timeout) === \"undefined\" || (force || !root._bokeh_is_initializing)) {\n    root._bokeh_timeout = Date.now() + 5000;\n    root._bokeh_failed_load = false;\n  }\n\n  function run_callbacks() {\n    try {\n      root._bokeh_onload_callbacks.forEach(function(callback) {\n        if (callback != null)\n          callback();\n      });\n    } finally {\n      delete root._bokeh_onload_callbacks;\n    }\n    console.debug(\"Bokeh: all callbacks have finished\");\n  }\n\n  function load_libs(css_urls, js_urls, js_modules, js_exports, callback) {\n    if (css_urls == null) css_urls = [];\n    if (js_urls == null) js_urls = [];\n    if (js_modules == null) js_modules = [];\n    if (js_exports == null) js_exports = {};\n\n    root._bokeh_onload_callbacks.push(callback);\n\n    if (root._bokeh_is_loading > 0) {\n      // Don't load bokeh if it is still initializing\n      console.debug(\"Bokeh: BokehJS is being loaded, scheduling callback at\", now());\n      return null;\n    } else if (js_urls.length === 0 && js_modules.length === 0 && Object.keys(js_exports).length === 0) {\n      // There is nothing to load\n      run_callbacks();\n      return null;\n    }\n\n    function on_load() {\n      root._bokeh_is_loading--;\n      if (root._bokeh_is_loading === 0) {\n        console.debug(\"Bokeh: all BokehJS libraries/stylesheets loaded\");\n        run_callbacks()\n      }\n    }\n    window._bokeh_on_load = on_load\n\n    function on_error(e) {\n      const src_el = e.srcElement\n      console.error(\"failed to load \" + (src_el.href || src_el.src));\n    }\n\n    const skip = [];\n    if (window.requirejs) {\n      window.requirejs.config({'packages': {}, 'paths': {}, 'shim': {}});\n      root._bokeh_is_loading = css_urls.length + 0;\n    } else {\n      root._bokeh_is_loading = css_urls.length + js_urls.length + js_modules.length + Object.keys(js_exports).length;\n    }\n\n    const existing_stylesheets = []\n    const links = document.getElementsByTagName('link')\n    for (let i = 0; i < links.length; i++) {\n      const link = links[i]\n      if (link.href != null) {\n        existing_stylesheets.push(link.href)\n      }\n    }\n    for (let i = 0; i < css_urls.length; i++) {\n      const url = css_urls[i];\n      const escaped = encodeURI(url)\n      if (existing_stylesheets.indexOf(escaped) !== -1) {\n        on_load()\n        continue;\n      }\n      const element = document.createElement(\"link\");\n      element.onload = on_load;\n      element.onerror = on_error;\n      element.rel = \"stylesheet\";\n      element.type = \"text/css\";\n      element.href = url;\n      console.debug(\"Bokeh: injecting link tag for BokehJS stylesheet: \", url);\n      document.body.appendChild(element);\n    }    var existing_scripts = []\n    const scripts = document.getElementsByTagName('script')\n    for (let i = 0; i < scripts.length; i++) {\n      var script = scripts[i]\n      if (script.src != null) {\n        existing_scripts.push(script.src)\n      }\n    }\n    for (let i = 0; i < js_urls.length; i++) {\n      const url = js_urls[i];\n      const escaped = encodeURI(url)\n      if (skip.indexOf(escaped) !== -1 || existing_scripts.indexOf(escaped) !== -1) {\n        if (!window.requirejs) {\n          on_load();\n        }\n        continue;\n      }\n      const element = document.createElement('script');\n      element.onload = on_load;\n      element.onerror = on_error;\n      element.async = false;\n      element.src = url;\n      console.debug(\"Bokeh: injecting script tag for BokehJS library: \", url);\n      document.head.appendChild(element);\n    }\n    for (let i = 0; i < js_modules.length; i++) {\n      const url = js_modules[i];\n      const escaped = encodeURI(url)\n      if (skip.indexOf(escaped) !== -1 || existing_scripts.indexOf(escaped) !== -1) {\n        if (!window.requirejs) {\n          on_load();\n        }\n        continue;\n      }\n      var element = document.createElement('script');\n      element.onload = on_load;\n      element.onerror = on_error;\n      element.async = false;\n      element.src = url;\n      element.type = \"module\";\n      console.debug(\"Bokeh: injecting script tag for BokehJS library: \", url);\n      document.head.appendChild(element);\n    }\n    for (const name in js_exports) {\n      const url = js_exports[name];\n      const escaped = encodeURI(url)\n      if (skip.indexOf(escaped) >= 0 || root[name] != null) {\n        if (!window.requirejs) {\n          on_load();\n        }\n        continue;\n      }\n      var element = document.createElement('script');\n      element.onerror = on_error;\n      element.async = false;\n      element.type = \"module\";\n      console.debug(\"Bokeh: injecting script tag for BokehJS library: \", url);\n      element.textContent = `\n      import ${name} from \"${url}\"\n      window.${name} = ${name}\n      window._bokeh_on_load()\n      `\n      document.head.appendChild(element);\n    }\n    if (!js_urls.length && !js_modules.length) {\n      on_load()\n    }\n  };\n\n  function inject_raw_css(css) {\n    const element = document.createElement(\"style\");\n    element.appendChild(document.createTextNode(css));\n    document.body.appendChild(element);\n  }\n\n  const js_urls = [\"https://cdn.holoviz.org/panel/1.8.1/dist/bundled/reactiveesm/es-module-shims@^1.10.0/dist/es-module-shims.min.js\"];\n  const js_modules = [];\n  const js_exports = {};\n  const css_urls = [];\n  const inline_js = [    function(Bokeh) {\n      Bokeh.set_log_level(\"info\");\n    },\nfunction(Bokeh) {} // ensure no trailing comma for IE\n  ];\n\n  function run_inline_js() {\n    if ((root.Bokeh !== undefined) || (force === true)) {\n      for (let i = 0; i < inline_js.length; i++) {\n        try {\n          inline_js[i].call(root, root.Bokeh);\n        } catch(e) {\n          if (!reloading) {\n            throw e;\n          }\n        }\n      }\n      // Cache old bokeh versions\n      if (Bokeh != undefined && !reloading) {\n        var NewBokeh = root.Bokeh;\n        if (Bokeh.versions === undefined) {\n          Bokeh.versions = new Map();\n        }\n        if (NewBokeh.version !== Bokeh.version) {\n          Bokeh.versions.set(NewBokeh.version, NewBokeh)\n        }\n        root.Bokeh = Bokeh;\n      }\n    } else if (Date.now() < root._bokeh_timeout) {\n      setTimeout(run_inline_js, 100);\n    } else if (!root._bokeh_failed_load) {\n      console.log(\"Bokeh: BokehJS failed to load within specified timeout.\");\n      root._bokeh_failed_load = true;\n    }\n    root._bokeh_is_initializing = false\n  }\n\n  function load_or_wait() {\n    // Implement a backoff loop that tries to ensure we do not load multiple\n    // versions of Bokeh and its dependencies at the same time.\n    // In recent versions we use the root._bokeh_is_initializing flag\n    // to determine whether there is an ongoing attempt to initialize\n    // bokeh, however for backward compatibility we also try to ensure\n    // that we do not start loading a newer (Panel>=1.0 and Bokeh>3) version\n    // before older versions are fully initialized.\n    if (root._bokeh_is_initializing && Date.now() > root._bokeh_timeout) {\n      // If the timeout and bokeh was not successfully loaded we reset\n      // everything and try loading again\n      root._bokeh_timeout = Date.now() + 5000;\n      root._bokeh_is_initializing = false;\n      root._bokeh_onload_callbacks = undefined;\n      root._bokeh_is_loading = 0\n      console.log(\"Bokeh: BokehJS was loaded multiple times but one version failed to initialize.\");\n      load_or_wait();\n    } else if (root._bokeh_is_initializing || (typeof root._bokeh_is_initializing === \"undefined\" && root._bokeh_onload_callbacks !== undefined)) {\n      setTimeout(load_or_wait, 100);\n    } else {\n      root._bokeh_is_initializing = true\n      root._bokeh_onload_callbacks = []\n      const bokeh_loaded = root.Bokeh != null && (root.Bokeh.version === py_version || (root.Bokeh.versions !== undefined && root.Bokeh.versions.has(py_version)));\n      if (!reloading && !bokeh_loaded) {\n        if (root.Bokeh) {\n          root.Bokeh = undefined;\n        }\n        console.debug(\"Bokeh: BokehJS not loaded, scheduling load and callback at\", now());\n      }\n      load_libs(css_urls, js_urls, js_modules, js_exports, function() {\n        console.debug(\"Bokeh: BokehJS plotting callback run at\", now());\n        run_inline_js();\n      });\n    }\n  }\n  // Give older versions of the autoload script a head-start to ensure\n  // they initialize before we start loading newer version.\n  setTimeout(load_or_wait, 100)\n}(window));\n</script>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<script type=\"application/javascript\">\n\nif ((window.PyViz === undefined) || (window.PyViz instanceof HTMLElement)) {\n  window.PyViz = {comms: {}, comm_status:{}, kernels:{}, receivers: {}, plot_index: []}\n}\n\n\n    function JupyterCommManager() {\n    }\n\n    JupyterCommManager.prototype.register_target = function(plot_id, comm_id, msg_handler) {\n      if (window.comm_manager || ((window.Jupyter !== undefined) && (Jupyter.notebook.kernel != null))) {\n        var comm_manager = window.comm_manager || Jupyter.notebook.kernel.comm_manager;\n        comm_manager.register_target(comm_id, function(comm) {\n          comm.on_msg(msg_handler);\n        });\n      } else if ((plot_id in window.PyViz.kernels) && (window.PyViz.kernels[plot_id])) {\n        window.PyViz.kernels[plot_id].registerCommTarget(comm_id, function(comm) {\n          comm.onMsg = msg_handler;\n        });\n      } else if (typeof google != 'undefined' && google.colab.kernel != null) {\n        google.colab.kernel.comms.registerTarget(comm_id, (comm) => {\n          var messages = comm.messages[Symbol.asyncIterator]();\n          function processIteratorResult(result) {\n            var message = result.value;\n            var content = {data: message.data, comm_id};\n            var buffers = []\n            for (var buffer of message.buffers || []) {\n              buffers.push(new DataView(buffer))\n            }\n            var metadata = message.metadata || {};\n            var msg = {content, buffers, metadata}\n            msg_handler(msg);\n            return messages.next().then(processIteratorResult);\n          }\n          return messages.next().then(processIteratorResult);\n        })\n      }\n    }\n\n    JupyterCommManager.prototype.get_client_comm = function(plot_id, comm_id, msg_handler) {\n      if (comm_id in window.PyViz.comms) {\n        return window.PyViz.comms[comm_id];\n      } else if (window.comm_manager || ((window.Jupyter !== undefined) && (Jupyter.notebook.kernel != null))) {\n        var comm_manager = window.comm_manager || Jupyter.notebook.kernel.comm_manager;\n        var comm = comm_manager.new_comm(comm_id, {}, {}, {}, comm_id);\n        if (msg_handler) {\n          comm.on_msg(msg_handler);\n        }\n      } else if ((plot_id in window.PyViz.kernels) && (window.PyViz.kernels[plot_id])) {\n        var comm = window.PyViz.kernels[plot_id].connectToComm(comm_id);\n        let retries = 0;\n        const open = () => {\n          if (comm.active) {\n            comm.open();\n          } else if (retries > 3) {\n            console.warn('Comm target never activated')\n          } else {\n            retries += 1\n            setTimeout(open, 500)\n          }\n        }\n        if (comm.active) {\n          comm.open();\n        } else {\n          setTimeout(open, 500)\n        }\n        if (msg_handler) {\n          comm.onMsg = msg_handler;\n        }\n      } else if (typeof google != 'undefined' && google.colab.kernel != null) {\n        var comm_promise = google.colab.kernel.comms.open(comm_id)\n        comm_promise.then((comm) => {\n          window.PyViz.comms[comm_id] = comm;\n          if (msg_handler) {\n            var messages = comm.messages[Symbol.asyncIterator]();\n            function processIteratorResult(result) {\n              var message = result.value;\n              var content = {data: message.data};\n              var metadata = message.metadata || {comm_id};\n              var msg = {content, metadata}\n              msg_handler(msg);\n              return messages.next().then(processIteratorResult);\n            }\n            return messages.next().then(processIteratorResult);\n          }\n        })\n        var sendClosure = (data, metadata, buffers, disposeOnDone) => {\n          return comm_promise.then((comm) => {\n            comm.send(data, metadata, buffers, disposeOnDone);\n          });\n        };\n        var comm = {\n          send: sendClosure\n        };\n      }\n      window.PyViz.comms[comm_id] = comm;\n      return comm;\n    }\n    window.PyViz.comm_manager = new JupyterCommManager();\n    \n\n\nvar JS_MIME_TYPE = 'application/javascript';\nvar HTML_MIME_TYPE = 'text/html';\nvar EXEC_MIME_TYPE = 'application/vnd.holoviews_exec.v0+json';\nvar CLASS_NAME = 'output';\n\n/**\n * Render data to the DOM node\n */\nfunction render(props, node) {\n  var div = document.createElement(\"div\");\n  var script = document.createElement(\"script\");\n  node.appendChild(div);\n  node.appendChild(script);\n}\n\n/**\n * Handle when a new output is added\n */\nfunction handle_add_output(event, handle) {\n  var output_area = handle.output_area;\n  var output = handle.output;\n  if ((output.data == undefined) || (!output.data.hasOwnProperty(EXEC_MIME_TYPE))) {\n    return\n  }\n  var id = output.metadata[EXEC_MIME_TYPE][\"id\"];\n  var toinsert = output_area.element.find(\".\" + CLASS_NAME.split(' ')[0]);\n  if (id !== undefined) {\n    var nchildren = toinsert.length;\n    var html_node = toinsert[nchildren-1].children[0];\n    html_node.innerHTML = output.data[HTML_MIME_TYPE];\n    var scripts = [];\n    var nodelist = html_node.querySelectorAll(\"script\");\n    for (var i in nodelist) {\n      if (nodelist.hasOwnProperty(i)) {\n        scripts.push(nodelist[i])\n      }\n    }\n\n    scripts.forEach( function (oldScript) {\n      var newScript = document.createElement(\"script\");\n      var attrs = [];\n      var nodemap = oldScript.attributes;\n      for (var j in nodemap) {\n        if (nodemap.hasOwnProperty(j)) {\n          attrs.push(nodemap[j])\n        }\n      }\n      attrs.forEach(function(attr) { newScript.setAttribute(attr.name, attr.value) });\n      newScript.appendChild(document.createTextNode(oldScript.innerHTML));\n      oldScript.parentNode.replaceChild(newScript, oldScript);\n    });\n    if (JS_MIME_TYPE in output.data) {\n      toinsert[nchildren-1].children[1].textContent = output.data[JS_MIME_TYPE];\n    }\n    output_area._hv_plot_id = id;\n    if ((window.Bokeh !== undefined) && (id in Bokeh.index)) {\n      window.PyViz.plot_index[id] = Bokeh.index[id];\n    } else {\n      window.PyViz.plot_index[id] = null;\n    }\n  } else if (output.metadata[EXEC_MIME_TYPE][\"server_id\"] !== undefined) {\n    var bk_div = document.createElement(\"div\");\n    bk_div.innerHTML = output.data[HTML_MIME_TYPE];\n    var script_attrs = bk_div.children[0].attributes;\n    for (var i = 0; i < script_attrs.length; i++) {\n      toinsert[toinsert.length - 1].childNodes[1].setAttribute(script_attrs[i].name, script_attrs[i].value);\n    }\n    // store reference to server id on output_area\n    output_area._bokeh_server_id = output.metadata[EXEC_MIME_TYPE][\"server_id\"];\n  }\n}\n\n/**\n * Handle when an output is cleared or removed\n */\nfunction handle_clear_output(event, handle) {\n  var id = handle.cell.output_area._hv_plot_id;\n  var server_id = handle.cell.output_area._bokeh_server_id;\n  if (((id === undefined) || !(id in PyViz.plot_index)) && (server_id !== undefined)) { return; }\n  var comm = window.PyViz.comm_manager.get_client_comm(\"hv-extension-comm\", \"hv-extension-comm\", function () {});\n  if (server_id !== null) {\n    comm.send({event_type: 'server_delete', 'id': server_id});\n    return;\n  } else if (comm !== null) {\n    comm.send({event_type: 'delete', 'id': id});\n  }\n  delete PyViz.plot_index[id];\n  if ((window.Bokeh !== undefined) & (id in window.Bokeh.index)) {\n    var doc = window.Bokeh.index[id].model.document\n    doc.clear();\n    const i = window.Bokeh.documents.indexOf(doc);\n    if (i > -1) {\n      window.Bokeh.documents.splice(i, 1);\n    }\n  }\n}\n\n/**\n * Handle kernel restart event\n */\nfunction handle_kernel_cleanup(event, handle) {\n  delete PyViz.comms[\"hv-extension-comm\"];\n  window.PyViz.plot_index = {}\n}\n\n/**\n * Handle update_display_data messages\n */\nfunction handle_update_output(event, handle) {\n  handle_clear_output(event, {cell: {output_area: handle.output_area}})\n  handle_add_output(event, handle)\n}\n\nfunction register_renderer(events, OutputArea) {\n  function append_mime(data, metadata, element) {\n    // create a DOM node to render to\n    var toinsert = this.create_output_subarea(\n    metadata,\n    CLASS_NAME,\n    EXEC_MIME_TYPE\n    );\n    this.keyboard_manager.register_events(toinsert);\n    // Render to node\n    var props = {data: data, metadata: metadata[EXEC_MIME_TYPE]};\n    render(props, toinsert[0]);\n    element.append(toinsert);\n    return toinsert\n  }\n\n  events.on('output_added.OutputArea', handle_add_output);\n  events.on('output_updated.OutputArea', handle_update_output);\n  events.on('clear_output.CodeCell', handle_clear_output);\n  events.on('delete.Cell', handle_clear_output);\n  events.on('kernel_ready.Kernel', handle_kernel_cleanup);\n\n  OutputArea.prototype.register_mime_type(EXEC_MIME_TYPE, append_mime, {\n    safe: true,\n    index: 0\n  });\n}\n\nif (window.Jupyter !== undefined) {\n  try {\n    var events = require('base/js/events');\n    var OutputArea = require('notebook/js/outputarea').OutputArea;\n    if (OutputArea.prototype.mime_types().indexOf(EXEC_MIME_TYPE) == -1) {\n      register_renderer(events, OutputArea);\n    }\n  } catch(err) {\n  }\n}\n\n</script>\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nLaunching server at http://localhost:35037\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\n<panel.io.server.Server at 0x7f25ac430a40>\n```\n:::\n:::\n\n\n",
    "supporting": [
      "ai_vs_traditional_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}